name: Build RHEL 9 RPM

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:

jobs:
  build-rpm:
    name: Build RPM for RHEL 9
    runs-on: ubuntu-latest
    container:
      image: rockylinux:9

    steps:
      - name: Install build dependencies
        run: |
          # Retry logic for dnf operations to handle transient network errors
          retry_dnf() {
            local max_attempts=3
            local attempt=1
            local delay=5

            while [ $attempt -le $max_attempts ]; do
              echo "Attempt $attempt of $max_attempts: $@"
              if dnf "$@"; then
                return 0
              fi

              if [ $attempt -lt $max_attempts ]; then
                echo "Command failed. Retrying in ${delay}s..."
                sleep $delay
                delay=$((delay * 2))
              fi
              attempt=$((attempt + 1))
            done

            echo "Command failed after $max_attempts attempts"
            return 1
          }

          # Clean dnf cache and update metadata
          dnf clean all
          retry_dnf makecache

          # Install packages with retry logic
          retry_dnf install -y dnf-plugins-core
          retry_dnf config-manager --set-enabled crb
          retry_dnf install -y epel-release
          retry_dnf install -y rpm-build gcc libpcap-devel tar gzip git

      - name: Install Rust toolchain
        run: |
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y --default-toolchain stable
          source $HOME/.cargo/env
          echo "$HOME/.cargo/bin" >> $GITHUB_PATH

      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract version from Cargo.toml
        id: version
        run: |
          VERSION=$(grep '^version' Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Building version: $VERSION"

      - name: Create RPM build directory structure
        run: |
          mkdir -p ~/rpmbuild/{BUILD,RPMS,SOURCES,SPECS,SRPMS}

      - name: Build Rust binary
        run: |
          source $HOME/.cargo/env
          cargo build --release

      - name: Create source tarball with pre-built binary
        run: |
          VERSION=${{ steps.version.outputs.VERSION }}
          tar czf ~/rpmbuild/SOURCES/linux-dhcp-forwarder-${VERSION}.tar.gz \
            --transform "s,^,linux-dhcp-forwarder-${VERSION}/," \
            --exclude='.git' \
            --exclude='.github' \
            Cargo.toml Cargo.lock src/ config.example.json linux-dhcp-forwarder.service README.md target/release/linux-dhcp-forwarder

      - name: Create modified spec file for pre-built binary
        run: |
          # Create a modified spec file that uses the pre-built binary
          cat > ~/rpmbuild/SPECS/linux-dhcp-forwarder.spec << 'EOF'
          Name:           linux-dhcp-forwarder
          Version:        0.1.0
          Release:        1%{?dist}
          Summary:        A DHCP packet forwarder for informational monitoring and device fingerprinting

          License:        MIT OR Apache-2.0
          URL:            https://github.com/yourusername/linux-dhcp-forwarder
          Source0:        %{name}-%{version}.tar.gz

          BuildRequires:  libpcap-devel
          BuildRequires:  gcc

          Requires:       libpcap

          %description
          A one-way DHCP packet forwarder designed to run on DHCP servers. It uses
          libpcap to capture copies of DHCP requests and forwards them to remote
          servers for informational purposes such as NAC device fingerprinting.
          This is NOT a DHCP relay - it does not send offers or ACKs back to clients.
          The service reads its configuration from a JSON file and can be deployed
          as a system service.

          %prep
          %setup -q

          %build
          # Binary pre-built in CI pipeline

          %install
          rm -rf $RPM_BUILD_ROOT
          mkdir -p $RPM_BUILD_ROOT%{_bindir}
          mkdir -p $RPM_BUILD_ROOT%{_sysconfdir}/dhcp-forwarder
          mkdir -p $RPM_BUILD_ROOT%{_unitdir}

          # Install binary
          install -m 0755 target/release/linux-dhcp-forwarder $RPM_BUILD_ROOT%{_bindir}/linux-dhcp-forwarder

          # Install example config
          install -m 0644 config.example.json $RPM_BUILD_ROOT%{_sysconfdir}/dhcp-forwarder/config.json

          # Install systemd service file
          install -m 0644 linux-dhcp-forwarder.service $RPM_BUILD_ROOT%{_unitdir}/linux-dhcp-forwarder.service

          %files
          %{_bindir}/linux-dhcp-forwarder
          %config(noreplace) %{_sysconfdir}/dhcp-forwarder/config.json
          %{_unitdir}/linux-dhcp-forwarder.service

          %post
          %systemd_post linux-dhcp-forwarder.service

          %preun
          %systemd_preun linux-dhcp-forwarder.service

          %postun
          %systemd_postun_with_restart linux-dhcp-forwarder.service

          %changelog
          * Fri Oct 17 2025 Your Name <your.email@example.com> - 0.1.0-1
          - Initial RPM release
          - One-way DHCP packet forwarding for informational purposes
          - DHCP packet capture using libpcap
          - Configurable remote forwarding to NAC or monitoring servers
          - Systemd service support
          EOF

      - name: Build RPM
        run: |
          rpmbuild -ba ~/rpmbuild/SPECS/linux-dhcp-forwarder.spec

      - name: Find built RPM
        id: find_rpm
        run: |
          RPM_PATH=$(find ~/rpmbuild/RPMS -name "*.rpm" -type f | head -1)
          RPM_NAME=$(basename "$RPM_PATH")
          echo "RPM_PATH=$RPM_PATH" >> $GITHUB_OUTPUT
          echo "RPM_NAME=$RPM_NAME" >> $GITHUB_OUTPUT
          echo "Built RPM: $RPM_PATH"

      - name: Upload RPM artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-dhcp-forwarder-rpm-rhel9
          path: ~/rpmbuild/RPMS/x86_64/*.rpm
          if-no-files-found: error

      - name: Create GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v1
        with:
          files: ~/rpmbuild/RPMS/x86_64/*.rpm
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
